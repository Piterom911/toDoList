{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","components/AddNewItem/AddNewItem.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","state/tasks-reducer.ts","components/ToDoList/Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddNewItem","React","memo","props","useState","inputValue","setInputValue","error","setError","onAddNewTaskHandler","useCallback","trim","addNewItem","onInputChangeHandler","event","currentTarget","value","onInputKeyPressHandler","key","className","TextField","variant","size","label","title","helperText","onKeyPress","onChange","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","toDoListsAPI","get","post","tdlID","delete","put","todolistId","taskId","newTaskData","EditableSpan","edit","setEdit","setValue","onSetEditHandler","onFocusBlur","changeItemValue","onChangeValueHandler","onEnterKeyHandler","onBlur","autoFocus","type","onDoubleClick","status","Completed","Task","onChangeItemHandler","task","id","onRemoveTaskHandler","removeTask","changeStatusHandler","e","console","log","checked","changeStatus","New","Checkbox","Delete","initialState","setTasksAC","tasks","removeTaskAC","addNewTaskAC","taskData","changeTaskAC","newData","changeTask","taskID","dispatch","getState","a","find","t","warn","currentTaskValues","description","priority","deadline","startDate","Todolist","useDispatch","useEffect","response","data","items","tasksForRender","filterStatus","filter","map","removeToDoListHandler","removeToDoList","onAllFilterTasksHandler","filterTasks","onActiveFilterTasksHandler","onCompletedFilterTasksHandler","addNewTask","onChangeListName","Paper","style","padding","heading","Button","disabled","addToDoListAC","v1","changeToDoListTitleAC","AppWithUseReducer","toDoLists","useSelector","state","tdls","toDoLostID","onChangeListNameHandler","listID","onChangeItemValueHandler","itemID","filterTasksHandler","toDoListID","removeTaskHandler","deleteTask","addNewTaskHandler","item","createTask","addNewListHandler","name","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","margin","Grid","container","spacing","tdl","rootReducer","combineReducers","action","order","addedDate","newState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","AppWithRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.461be3e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '18e1d480-771d-4bcb-b6a1-86b6a255bc4b'\r\n    }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type ToDoListType = {\r\n    \"id\": string\r\n    \"title\": string\r\n    \"addedDate\": string\r\n    \"order\": number\r\n}\r\ntype CommonRequestToDoListType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype AllTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type UpdateDataType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n}\r\n\r\nexport const toDoListsAPI = {\r\n    getToDoLists() {\r\n        return instance.get<ToDoListType[]>('todo-lists')\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<CommonRequestToDoListType<{ item: ToDoListType }>>(`todo-lists`, {title})\r\n    },\r\n    deleteToDoList(tdlID: string) {\r\n        return instance.delete<CommonRequestToDoListType>(`todo-lists/${tdlID}`)\r\n    },\r\n    updateToDoList(tdlID: string, title: string) {\r\n        return instance.put<CommonRequestToDoListType>(`todo-lists/${tdlID}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<AllTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonRequestToDoListType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, newTaskData: UpdateTaskType) {\r\n        return instance.put<CommonRequestToDoListType>(`todo-lists/${todolistId}/tasks/${taskId}`, newTaskData)\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonRequestToDoListType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddNewItemPropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\n\r\nexport const AddNewItem = React.memo(function(props: AddNewItemPropsType) {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const onAddNewTaskHandler = useCallback(() => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addNewItem(inputValue)\r\n        } else {\r\n            setError('This field is required!')\r\n        }\r\n        setInputValue('')\r\n    }, [inputValue, props.addNewItem])\r\n\r\n    const onInputChangeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value)\r\n        if (!!error) setError('')\r\n    }, [error])\r\n    const onInputKeyPressHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') onAddNewTaskHandler()\r\n    }, [onAddNewTaskHandler])\r\n\r\n    return (\r\n        <div className=\"listInputAria\">\r\n            <TextField variant=\"outlined\" size=\"small\"\r\n                       label=\"New item name\"\r\n                       title=\"Here you can add a new item to the list\"\r\n                       helperText={error} error={!!error}\r\n                       onKeyPress={onInputKeyPressHandler}\r\n                       onChange={onInputChangeHandler}\r\n                       value={inputValue}/>\r\n            <IconButton color=\"primary\" onClick={onAddNewTaskHandler}>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FocusEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    status: TaskStatuses\r\n    title: string\r\n    changeItemValue: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const onSetEditHandler = useCallback(() => {\r\n        setEdit(true)\r\n        setValue(props.title)\r\n    }, [setEdit, setValue, props.title])\r\n\r\n    const onFocusBlur = useCallback((event: FocusEvent<HTMLInputElement>) => {\r\n        props.changeItemValue(event.currentTarget.value)\r\n        setEdit(false)\r\n    }, [props.changeItemValue, setEdit])\r\n\r\n    const onChangeValueHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.currentTarget.value)\r\n    }, [setValue])\r\n\r\n    const onEnterKeyHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\r\n        if(event.key === 'Enter') {\r\n            props.changeItemValue(value)\r\n            setEdit(false)\r\n        }\r\n    }, [props.changeItemValue, setEdit, value])\r\n\r\n    return edit\r\n        ? <TextField onKeyPress={onEnterKeyHandler}\r\n                     onChange={onChangeValueHandler}\r\n                     onBlur={onFocusBlur} value={value}\r\n                     autoFocus\r\n                     type=\"text\"/>\r\n        : <span onDoubleClick={onSetEditHandler}\r\n                className={props.status === TaskStatuses.Completed\r\n                    ? 'doneTask'\r\n                    : 'inProcess'}>{props.title} </span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (toDoListID: string, id: string) => void\r\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\r\n    changeItemValue: (listID: string, itemID: string, value: string) => void\r\n    tdlID: string\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = (props: TaskPropsType) => {\r\n    const onChangeItemHandler = useCallback((value: string) => {\r\n        props.changeItemValue(props.tdlID, props.task.id, value)\r\n    }, [props.tdlID, props.task.id])\r\n    const onRemoveTaskHandler = useCallback(() => {\r\n        props.removeTask(props.tdlID, props.task.id)\r\n    }, [props.removeTask, props.tdlID, props.task.id])\r\n\r\n    const changeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        console.log(props.task.status, e.currentTarget.checked)\r\n        props.changeStatus(props.tdlID, props.task.id, e.currentTarget.checked\r\n            ? TaskStatuses.Completed\r\n            : TaskStatuses.New)\r\n    }, [props.changeStatus, props.tdlID, props.task.id])\r\n\r\n    return (\r\n        <li className=\"listItem\" key={props.task.id}>\r\n            <Checkbox className=\"itemCheckBox\" color=\"primary\" onChange={changeStatusHandler}\r\n                      checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan changeItemValue={onChangeItemHandler} status={props.task.status} title={props.task.title}/>\r\n            <IconButton className={\"iconTrash\"} onClick={onRemoveTaskHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n}","import {TasksStateType} from \"../App\";\r\nimport {TaskType, toDoListsAPI, UpdateDataType, UpdateTaskType} from \"../api/todolists-api\";\r\nimport {SetTDLsACType} from \"./todolists-reducer\";\r\nimport {AppRootStateType, ThunkType} from \"./store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TO-DO-LISTS\":\r\n            const newState = {...state}\r\n            action.tdls.forEach(t => newState[t.id] = [])\r\n            return newState\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.tdlID]: action.tasks}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.tdlID]: state[action.tdlID].filter(t => t.id !== action.id)}\r\n        case \"ADD-NEW-TASK\":\r\n            return {...state, [action.tdlID]: [action.taskData, ...state[action.tdlID]]}\r\n        case \"CHANGE-TASK\":\r\n            return {\r\n                ...state, [action.tdlID]: state[action.tdlID].map(task =>\r\n                    (task.id === action.id ? {...task, ...action.newData} : task))\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.tdlID]: []}\r\n        case \"REMOVE-TODOLIST\": {\r\n            const newState = {...state}\r\n            delete newState[action.tdlID]\r\n            return newState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type TasksActionType = SetTasksACType | RemoveTaskACType | RemoveTodolistACType\r\n    | AddNewTaskACType | ChangeTaskACType | AddNewToDoListTasksArrayACType\r\n    | SetTDLsACType\r\n\r\nexport type SetTasksACType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskACType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskACType = ReturnType<typeof changeTaskAC>\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport type AddNewToDoListTasksArrayACType = ReturnType<typeof addNewToDoListTasksArrayAC>\r\n\r\nexport const setTasksAC = (tdlID: string, tasks: TaskType[]) => (\r\n    {type: 'SET-TASKS', tdlID, tasks} as const\r\n)\r\nexport const removeTaskAC = (tdlID: string, id: string) => (\r\n    {type: 'REMOVE-TASK', tdlID, id} as const\r\n)\r\nexport const addNewTaskAC = (tdlID: string, taskData: TaskType) => (\r\n    {type: 'ADD-NEW-TASK', tdlID, taskData} as const\r\n)\r\nexport const changeTaskAC = (tdlID: string, id: string, newData: UpdateTaskType) => (\r\n    {type: 'CHANGE-TASK', tdlID, id, newData} as const\r\n)\r\nexport const removeTodolistAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\r\nexport const addNewToDoListTasksArrayAC = (tdlID: string) => ({type: 'ADD-TODOLIST', tdlID} as const)\r\n\r\nexport const setTasks = (tdlID: string): ThunkType => async dispatch => {\r\n    const response = await toDoListsAPI.getTasks(tdlID)\r\n    dispatch(setTasksAC(tdlID, response.data.items))\r\n}\r\nexport const createTask = (tdlID: string, title: string): ThunkType => async dispatch => {\r\n    const response = await toDoListsAPI.createTask(tdlID, title)\r\n    dispatch(addNewTaskAC(tdlID, response.data.data.item))\r\n}\r\nexport const deleteTask = (tdlID: string, taskID: string): ThunkType => async dispatch => {\r\n    await toDoListsAPI.deleteTasks(tdlID, taskID)\r\n    dispatch(removeTaskAC(tdlID, taskID))\r\n}\r\nexport const changeTask = (tdlID: string, taskID: string, newData: UpdateDataType): ThunkType =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        let task = getState().tasks[tdlID].find( t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('There is no such taskID')\r\n            return\r\n        }\r\n        const currentTaskValues = {\r\n            title: task.title,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            ...newData\r\n        }\r\n        await toDoListsAPI.updateTask(tdlID, taskID, currentTaskValues)\r\n        dispatch(changeTaskAC(tdlID, taskID, currentTaskValues))\r\n    }\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddNewItem} from \"../AddNewItem/AddNewItem\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport {FilterType} from \"../../state/todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasks} from \"../../state/tasks-reducer\";\r\n\r\nexport type ToDoListPropsType = {\r\n    id: string\r\n    heading: string,\r\n    tasks: Array<TaskType>\r\n    filterStatus: FilterType\r\n    removeTask: (toDoListID: string, id: string) => void\r\n    filterTasks: (toDoListID: string, filterType: FilterType) => void\r\n    addNewTask: (toDoListID: string, title: string) => void\r\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeItemValue: (listID: string, itemID: string, value: string) => void\r\n    onChangeListName: (listID: string, value: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: ToDoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(setTasks(props.id))\r\n    }, [])\r\n\r\n    let tasksForRender = props.tasks\r\n    if (props.filterStatus === 'active') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    if (props.filterStatus === 'completed') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    const tasks = tasksForRender.map(t => <Task removeTask={props.removeTask}\r\n                                                changeItemValue={props.changeItemValue}\r\n                                                changeStatus={props.changeStatus}\r\n                                                tdlID={props.id} task={t} key={t.id} />)\r\n\r\n    const removeToDoListHandler = useCallback(() => props.removeToDoList(props.id), [props.id, props.removeToDoList])\r\n\r\n    const onAllFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'all'), [props.filterTasks, props.id])\r\n    const onActiveFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'active'), [props.filterTasks, props.id])\r\n    const onCompletedFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'completed'), [props.filterTasks, props.id])\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        props.addNewTask(props.id, title)\r\n    }, [props.addNewTask, props.id])\r\n\r\n    const onChangeListName = useCallback((value: string) => {\r\n        props.onChangeListName(props.id, value)\r\n    }, [props.onChangeListName, props.id])\r\n\r\n    return (\r\n        <Paper style={{padding: \"15px\" }}>\r\n            <h3>\r\n                <EditableSpan status={TaskStatuses.New} title={props.heading} changeItemValue={onChangeListName} />\r\n                <IconButton onClick={removeToDoListHandler}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddNewItem addNewItem={addNewTask}/>\r\n            <ul className=\"listWrapper\">\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button color=\"primary\" disabled={props.filterStatus === 'all'} variant={props.filterStatus === 'all' ? 'outlined' : 'contained'} onClick={ onAllFilterTasksHandler }>All</Button>\r\n                <Button color=\"secondary\" disabled={props.filterStatus === 'active'} variant={props.filterStatus === 'active' ? 'outlined' : 'contained'} onClick={ onActiveFilterTasksHandler }>Active</Button>\r\n                <Button color=\"default\" disabled={props.filterStatus === 'completed'} variant={props.filterStatus === 'completed' ? 'outlined' : 'contained'} onClick={ onCompletedFilterTasksHandler }>Completed</Button>\r\n            </div>\r\n        </Paper>\r\n    )\r\n});\r\n\r\n","import {v1} from \"uuid\";\r\nimport {toDoListsAPI, ToDoListType} from \"../api/todolists-api\";\r\nimport {ThunkType} from \"./store\";\r\n\r\nconst initialState: Array<ToDoListType & { status: FilterType }> = []\r\n\r\nexport const toDoListReducer = (state: Array<ToDoListWithStatusType> = initialState,\r\n                                action: ToDoListActionType): Array<ToDoListWithStatusType> => {\r\n    switch (action.type) {\r\n        case \"SET-TO-DO-LISTS\":\r\n            return action.tdls.map(tdl => ({...tdl, status: 'all'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tdl => tdl.id !== action.tdlID)\r\n        case 'ADD-TODOLIST':\r\n            return [{title: action.title, id: action.tdlID, status: 'all', order: 0, addedDate: ''}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tdl => tdl.id === action.id ? {...tdl, title: action.title} : tdl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tdl => tdl.id === action.id ? {...tdl, status: action.status} : tdl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setTDLsAC = (tdls: Array<ToDoListType>) => ({type: \"SET-TO-DO-LISTS\", tdls} as const)\r\nexport const removeToDoListAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\r\nexport const addToDoListAC = (title: string) => ({type: 'ADD-TODOLIST', title, tdlID: v1(),} as const)\r\nexport const changeToDoListFilterAC = (id: string, status: FilterType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, status} as const\r\n}\r\nexport const changeToDoListTitleAC = (id: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title} as const\r\n}\r\n\r\n//types\r\nexport type ToDoListActionType = SetTDLsACType | RemoveToDoListACType\r\n    | AddToDoListACType | ChangeToDoListFilterACType | ChangeToDoListTitleACType\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type ToDoListWithStatusType = ToDoListType & { status: FilterType }\r\nexport type SetTDLsACType = ReturnType<typeof setTDLsAC>\r\nexport type RemoveToDoListACType = ReturnType<typeof removeToDoListAC>\r\nexport type AddToDoListACType = ReturnType<typeof addToDoListAC>\r\nexport type ChangeToDoListFilterACType = ReturnType<typeof changeToDoListFilterAC>\r\nexport type ChangeToDoListTitleACType = ReturnType<typeof changeToDoListTitleAC>\r\n\r\n\r\n//thunks\r\nexport const setToDoListsTC = (): ThunkType => async dispatch => {\r\n    const response = await toDoListsAPI.getToDoLists()\r\n    dispatch(setTDLsAC(response.data))\r\n}\r\nexport const createToDoList = (title: string): ThunkType => async dispatch => {\r\n    await toDoListsAPI.createToDoList(title)\r\n    dispatch(addToDoListAC(title))\r\n}\r\nexport const deleteToDoList = (id: string): ThunkType => async dispatch => {\r\n    await toDoListsAPI.deleteToDoList(id)\r\n    dispatch(removeToDoListAC(id))\r\n}\r\nexport const updateToDoList = (id: string, title: string): ThunkType => async dispatch => {\r\n    await toDoListsAPI.updateToDoList(id, title)\r\n    dispatch(changeToDoListTitleAC(id, title))\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/ToDoList/Todolist\";\r\nimport {AddNewItem} from \"./components/AddNewItem/AddNewItem\";\r\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    changeToDoListFilterAC,\r\n    createToDoList,\r\n    deleteToDoList,\r\n    FilterType,\r\n    setToDoListsTC,\r\n    updateToDoList\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    changeTask,\r\n    createTask,\r\n    deleteTask,\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType, ToDoListType} from \"./api/todolists-api\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst AppWithUseReducer = React.memo(function() {\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListType & {status: FilterType}>>( state => state.toDoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>( state => state.tasks)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect( () => {\r\n        dispatch(setToDoListsTC())\r\n    }, [])\r\n\r\n    const removeToDoListHandler = useCallback((toDoLostID: string) => {\r\n        dispatch(deleteToDoList(toDoLostID))\r\n    }, [dispatch])\r\n\r\n    const onChangeListNameHandler = useCallback((listID: string, value: string) => {\r\n        dispatch(updateToDoList(listID, value))\r\n    }, [dispatch])\r\n\r\n    const onChangeItemValueHandler = useCallback((listID: string, itemID: string, title: string) => {\r\n        dispatch(changeTask(listID, itemID, {title}))\r\n    }, [dispatch])\r\n\r\n    const filterTasksHandler = useCallback((toDoListID: string, value: FilterType) => {\r\n        dispatch(changeToDoListFilterAC(toDoListID, value))\r\n    }, [dispatch])\r\n\r\n    const removeTaskHandler = useCallback((toDoListID: string, taskID: string) => {\r\n        dispatch(deleteTask(toDoListID, taskID))\r\n    }, [dispatch])\r\n\r\n    const addNewTaskHandler = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(createTask(toDoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatusHandler = useCallback((toDoListID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(changeTask(toDoListID, id, {status}))\r\n    }, [dispatch])\r\n\r\n    const addNewListHandler = useCallback((name: string) => {\r\n        dispatch(createToDoList(name))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar variant=\"dense\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        My To Do Lists\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <div className=\"addNewList\">\r\n                    <Paper style={{padding: \"15px\" }}>\r\n                        <h2 style={{margin: 0}}>Add New List</h2>\r\n                        <AddNewItem addNewItem={addNewListHandler}/>\r\n                    </Paper>\r\n                </div>\r\n                <Grid container spacing={2}>\r\n                    {toDoLists.map(tdl => {\r\n                        return (\r\n                            <Grid item  key={tdl.id}>\r\n                                <Todolist id={tdl.id}\r\n                                          heading={tdl.title}\r\n                                          tasks={tasks[tdl.id]}\r\n                                          removeTask={removeTaskHandler}\r\n                                          filterTasks={filterTasksHandler}\r\n                                          addNewTask={addNewTaskHandler}\r\n                                          changeStatus={changeStatusHandler}\r\n                                          filterStatus={tdl.status}\r\n                                          removeToDoList={removeToDoListHandler}\r\n                                          changeItemValue={onChangeItemValueHandler}\r\n                                          onChangeListName={onChangeListNameHandler}\r\n                                />\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithUseReducer;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ToDoListActionType, toDoListReducer} from \"./todolists-reducer\";\r\nimport {TasksActionType, tasksReducer} from \"./tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists: toDoListReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type RootActionType = ToDoListActionType | TasksActionType\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, RootActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <AppWithRedux/>\r\n                </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}