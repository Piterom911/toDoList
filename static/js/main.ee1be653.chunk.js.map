{"version":3,"sources":["serviceWorker.ts","app/appReducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/todolists-api.ts","components/AddNewItem/AddNewItem.tsx","components/EditableSpan/EditableSpan.tsx","features/ToDoListsAll/ToDoList/Task/Task.tsx","utils/error-utils.ts","features/ToDoListsAll/tasks-reducer.ts","features/ToDoListsAll/ToDoList/Todolist.tsx","features/ToDoListsAll/todolists-reducer.ts","features/ToDoListsAll/ToDoListsAll.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appReducerInitialState","errorText","requestStatus","isInitialized","setRequestStatus","status","type","setError","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","error","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","TaskStatuses","TaskPriorities","AddNewItem","memo","useState","inputValue","setInputValue","onAddNewTaskHandler","useCallback","trim","addNewItem","onInputChangeHandler","currentTarget","value","onInputKeyPressHandler","key","className","TextField","size","label","title","helperText","onKeyPress","onChange","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","toDoListsAPI","tdlID","put","todolistId","taskId","newTaskData","EditableSpan","edit","setEdit","setValue","onSetEditHandler","onFocusBlur","changeItemValue","onChangeValueHandler","onEnterKeyHandler","onBlur","autoFocus","onDoubleClick","Completed","Task","onChangeItemHandler","task","id","onRemoveTaskHandler","removeTask","changeStatusHandler","e","console","log","checked","changeStatus","New","entityStatus","Checkbox","Delete","handleServerAppError","messages","handleServerNetworkError","message","initialState","setTaskEntityStatus","setTasksAC","tasks","removeTaskAC","addNewTaskAC","taskData","changeTaskAC","newData","changeTask","taskID","getState","a","find","t","warn","currentTaskValues","description","priority","deadline","startDate","response","resultCode","Todolist","useEffect","items","tasksForRender","filterStatus","filter","map","removeToDoListHandler","removeToDoList","onAllFilterTasksHandler","filterTasks","onActiveFilterTasksHandler","onCompletedFilterTasksHandler","addNewTask","onChangeListName","Paper","heading","Button","style","margin","disabled","setEntityStatus","changeToDoListTitleAC","ToDoListsAll","toDoLists","isLoggedIn","login","tdls","toDoLostID","onChangeListNameHandler","listID","onChangeItemValueHandler","itemID","filterTasksHandler","toDoListID","removeTaskHandler","deleteTask","addNewTaskHandler","item","createTask","addNewListHandler","name","payload","padding","Grid","container","spacing","tdl","to","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","handleBlur","touched","fontSize","FormControlLabel","control","AppWithUseReducer","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","fontWeight","marginLeft","LinearProgress","Container","path","exact","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","action","newState","forEach","ts","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ee1be653.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithUseState is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppReducerInitialStateType = {\r\n    errorText: null | string\r\n    requestStatus: RequestStatusType\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const appReducerInitialState: AppReducerInitialStateType = {\r\n    errorText: null,\r\n    requestStatus: 'idle',\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: AppReducerInitialStateType = appReducerInitialState, action: AppActionsType)\r\n    : AppReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-REQUEST-STATUS\":\r\n            return { ...state, requestStatus: action.status }\r\n        case \"SET-APP-ERROR\":\r\n            return { ...state, errorText: action.errorText }\r\n        case \"SET-APP-INITIALIZED\":\r\n            return { ...state, isInitialized: action.status }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AppActionsType = SetRequestStatusActionType\r\n    | SetErrorActionType | SetInitializedActionType\r\n\r\nexport type SetRequestStatusActionType = ReturnType<typeof setRequestStatus>\r\nexport type SetErrorActionType = ReturnType<typeof setError>\r\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\nexport const setRequestStatus = (status: RequestStatusType) => ({type: 'SET-REQUEST-STATUS', status} as const)\r\nexport const setError = (errorText: null | string) => ({type: 'SET-APP-ERROR', errorText} as const)\r\nexport const setInitialized = (status: boolean) => ({type: 'SET-APP-INITIALIZED', status} as const)","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setError} from \"../../app/appReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, null | string>( state => state.app.errorText )\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error} 😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '18e1d480-771d-4bcb-b6a1-86b6a255bc4b'\r\n    }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type ToDoListType = {\r\n    \"id\": string\r\n    \"title\": string\r\n    \"addedDate\": string\r\n    \"order\": number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype AllTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\nexport type UpdateDataType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type MeResponseType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    //password zLTUyiXvk_cf9fk\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    logout () {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\n\r\nexport const toDoListsAPI = {\r\n    getToDoLists() {\r\n        return instance.get<ToDoListType[]>('todo-lists')\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{ item: ToDoListType }>>(`todo-lists`, {title})\r\n    },\r\n    deleteToDoList(tdlID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${tdlID}`)\r\n    },\r\n    updateToDoList(tdlID: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${tdlID}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<AllTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, newTaskData: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, newTaskData)\r\n    },\r\n    deleteTasks(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddNewItemPropsType = {\r\n    addNewItem: (title: string) => void\r\n}\r\n\r\nexport const AddNewItem = React.memo(function(props: AddNewItemPropsType) {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const onAddNewTaskHandler = useCallback(() => {\r\n        if (inputValue.trim() !== '') {\r\n            props.addNewItem(inputValue)\r\n        } else {\r\n            setError('This field is required!')\r\n        }\r\n        setInputValue('')\r\n    }, [props, inputValue])\r\n\r\n    const onInputChangeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value)\r\n        if (!!error) setError('')\r\n    }, [error])\r\n    const onInputKeyPressHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') onAddNewTaskHandler()\r\n    }, [onAddNewTaskHandler])\r\n\r\n    return (\r\n        <div className=\"listInputAria\">\r\n            <TextField variant=\"outlined\" size=\"small\"\r\n                       label=\"New item name\"\r\n                       title=\"Here you can add a new item to the list\"\r\n                       helperText={error} error={!!error}\r\n                       onKeyPress={onInputKeyPressHandler}\r\n                       onChange={onInputChangeHandler}\r\n                       value={inputValue}/>\r\n            <IconButton color=\"primary\" onClick={onAddNewTaskHandler}>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, FocusEvent, KeyboardEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    status: TaskStatuses\r\n    title: string\r\n    changeItemValue: (value: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const onSetEditHandler = useCallback(() => {\r\n        setEdit(true)\r\n        setValue(props.title)\r\n    }, [setEdit, setValue, props])\r\n\r\n    const onFocusBlur = useCallback((event: FocusEvent<HTMLInputElement>) => {\r\n        props.changeItemValue(event.currentTarget.value)\r\n        setEdit(false)\r\n    }, [props, setEdit])\r\n\r\n    const onChangeValueHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(event.currentTarget.value)\r\n    }, [setValue])\r\n\r\n    const onEnterKeyHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\r\n        if(event.key === 'Enter') {\r\n            props.changeItemValue(value)\r\n            setEdit(false)\r\n        }\r\n    }, [props, setEdit, value])\r\n\r\n    return edit\r\n        ? <TextField onKeyPress={onEnterKeyHandler}\r\n                     onChange={onChangeValueHandler}\r\n                     onBlur={onFocusBlur} value={value}\r\n                     autoFocus\r\n                     type=\"text\"/>\r\n        : <span onDoubleClick={onSetEditHandler}\r\n                className={props.status === TaskStatuses.Completed\r\n                    ? 'doneTask'\r\n                    : 'inProcess'}>{props.title} </span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\nimport { TaskWithLocalDataType } from \"../../tasks-reducer\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    removeTask: (toDoListID: string, id: string) => void\r\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\r\n    changeItemValue: (listID: string, itemID: string, value: string) => void\r\n    tdlID: string\r\n    task: TaskType & TaskWithLocalDataType\r\n}\r\n\r\nexport const Task = (props: TaskPropsType) => {\r\n    const onChangeItemHandler = useCallback((value: string) => {\r\n        props.changeItemValue(props.tdlID, props.task.id, value)\r\n    }, [props])\r\n    const onRemoveTaskHandler = useCallback(() => {\r\n        props.removeTask(props.tdlID, props.task.id)\r\n    }, [props])\r\n\r\n    const changeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        console.log(props.task.status, e.currentTarget.checked)\r\n        props.changeStatus(props.tdlID, props.task.id, e.currentTarget.checked\r\n            ? TaskStatuses.Completed\r\n            : TaskStatuses.New)\r\n    }, [props])\r\n\r\n    return (\r\n        <li className={`listItem ${props.task.entityStatus === 'loading' && 'entityRequest'}`} key={props.task.id}>\r\n            <Checkbox className=\"itemCheckBox\" color=\"primary\" onChange={changeStatusHandler}\r\n                      checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan changeItemValue={onChangeItemHandler} status={props.task.status} title={props.task.title}/>\r\n            <IconButton className={\"iconTrash\"} onClick={onRemoveTaskHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n}","import {ResponseType} from \"../api/todolists-api\";\r\nimport {setError, SetErrorActionType, setRequestStatus, SetRequestStatusActionType} from \"../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setError(data.messages[0] ?? 'Some Error occurred!'))\r\n    dispatch(setRequestStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setError(error.message ?? 'Some Error occurred!'))\r\n    dispatch(setRequestStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorActionType | SetRequestStatusActionType>\r\n\r\nexport const a = 0","import {TaskType, toDoListsAPI, UpdateDataType, UpdateTaskType} from \"../../api/todolists-api\";\r\nimport {AddToDoListACType, SetTDLsACType} from \"./todolists-reducer\";\r\nimport {AppRootStateType, ThunkType} from \"../../app/store\";\r\nimport {RequestStatusType, setError, setRequestStatus} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: LocalTasksType = {}\r\n\r\nexport type LocalTasksType = {\r\n    [key: string]: Array<TaskType & TaskWithLocalDataType>\r\n}\r\nexport type TaskWithLocalDataType = {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const tasksReducer = (state: LocalTasksType = initialState, action: TasksActionsType): LocalTasksType => {\r\n    switch (action.type) {\r\n        case \"SET-TO-DO-LISTS\":\r\n            const newState = {...state}\r\n            action.tdls.forEach(t => newState[t.id] = [])\r\n            return newState\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.tdlID]: action.tasks.map(ts => ({...ts, entityStatus: 'idle'}))}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.tdlID]: state[action.tdlID].filter(t => t.id !== action.id)}\r\n        case \"ADD-NEW-TASK\":\r\n            return {...state, [action.tdlID]: [{...action.taskData, entityStatus: 'idle'}, ...state[action.tdlID]]}\r\n        case \"CHANGE-TASK\":\r\n            return {\r\n                ...state, [action.tdlID]: state[action.tdlID].map(task =>\r\n                    (task.id === action.id ? {...task, ...action.newData} : task))\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.payload.id]: []}\r\n        case \"REMOVE-TODOLIST\": {\r\n            const newState = {...state}\r\n            delete newState[action.tdlID]\r\n            return newState\r\n        }\r\n        case \"SET-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state, [action.tdlID]: state[action.tdlID].map(task =>\r\n                    (task.id === action.id ? {...task, entityStatus: action.status} : task))\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type TasksActionsType = SetTasksACType | RemoveTaskACType | RemoveTodolistACType\r\n    | AddNewTaskACType | ChangeTaskACType\r\n    | SetTDLsACType | AddToDoListACType\r\n    | SetTaskEntityStatus\r\n\r\nexport type SetTasksACType = ReturnType<typeof setTasksAC>\r\nexport type RemoveTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type AddNewTaskACType = ReturnType<typeof addNewTaskAC>\r\nexport type ChangeTaskACType = ReturnType<typeof changeTaskAC>\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTaskEntityStatus = ReturnType<typeof setTaskEntityStatus>\r\n\r\nexport const setTaskEntityStatus = (tdlID: string, id: string, status: RequestStatusType) => (\r\n    { type: \"SET-TASK-ENTITY-STATUS\", status, tdlID, id } as const)\r\nexport const setTasksAC = (tdlID: string, tasks: TaskType[]) => (\r\n    {type: 'SET-TASKS', tdlID, tasks} as const\r\n)\r\nexport const removeTaskAC = (tdlID: string, id: string) => (\r\n    {type: 'REMOVE-TASK', tdlID, id} as const\r\n)\r\nexport const addNewTaskAC = (tdlID: string, taskData: TaskType) => (\r\n    {type: 'ADD-NEW-TASK', tdlID, taskData} as const\r\n)\r\nexport const changeTaskAC = (tdlID: string, id: string, newData: UpdateTaskType) => (\r\n    {type: 'CHANGE-TASK', tdlID, id, newData} as const\r\n)\r\nexport const removeTodolistAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\r\n\r\nexport const setTasks = (tdlID: string): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await toDoListsAPI.getTasks(tdlID)\r\n        if (response.data.error) {\r\n            dispatch(setRequestStatus('failed'))\r\n            dispatch(setError('Some error occurred'))\r\n        } else {\r\n            dispatch(setTasksAC(tdlID, response.data.items))\r\n            dispatch(setRequestStatus('succeeded'))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (tdlID: string, title: string): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await toDoListsAPI.createTask(tdlID, title)\r\n        if (response.data.resultCode !== 0) {\r\n            handleServerAppError(response.data, dispatch)\r\n        } else {\r\n            dispatch(addNewTaskAC(tdlID, response.data.data.item))\r\n            dispatch(setRequestStatus('succeeded'))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTask = (tdlID: string, taskID: string): ThunkType => async dispatch => {\r\n    dispatch(setTaskEntityStatus(tdlID, taskID, 'loading'))\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await toDoListsAPI.deleteTasks(tdlID, taskID)\r\n        if (response.data.resultCode !== 0) {\r\n            handleServerAppError(response.data, dispatch)\r\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\r\n        } else {\r\n            dispatch(removeTaskAC(tdlID, taskID))\r\n            dispatch(setRequestStatus('succeeded'))\r\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'succeeded'))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\r\n    }\r\n}\r\nexport const changeTask = (tdlID: string, taskID: string, newData: UpdateDataType): ThunkType =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setTaskEntityStatus(tdlID, taskID, 'loading'))\r\n        dispatch(setRequestStatus('loading'))\r\n        let task = getState().tasks[tdlID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            console.warn('There is no such taskID')\r\n            return\r\n        }\r\n        const currentTaskValues = {\r\n            title: task.title,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            deadline: task.deadline,\r\n            startDate: task.startDate,\r\n            ...newData\r\n        }\r\n        try {\r\n            const response = await toDoListsAPI.updateTask(tdlID, taskID, currentTaskValues)\r\n            if (response.data.resultCode !== 0) {\r\n                handleServerAppError(response.data, dispatch)\r\n                dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\r\n            } else {\r\n                dispatch(changeTaskAC(tdlID, taskID, currentTaskValues))\r\n                dispatch(setRequestStatus('succeeded'))\r\n                dispatch(setTaskEntityStatus(tdlID, taskID, 'succeeded'))\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\r\n        }\r\n    }\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddNewItem} from \"../../../components/AddNewItem/AddNewItem\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasks, TaskWithLocalDataType} from \"../tasks-reducer\";\r\nimport {RequestStatusType} from \"../../../app/appReducer\";\r\n\r\nexport type ToDoListPropsType = {\r\n    id: string\r\n    heading: string,\r\n    tasks: Array<TaskType & TaskWithLocalDataType>\r\n    filterStatus: FilterType\r\n    entityStatus: RequestStatusType\r\n    removeTask: (toDoListID: string, id: string) => void\r\n    filterTasks: (toDoListID: string, filterType: FilterType) => void\r\n    addNewTask: (toDoListID: string, title: string) => void\r\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeItemValue: (listID: string, itemID: string, value: string) => void\r\n    onChangeListName: (listID: string, value: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: ToDoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(setTasks(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    let tasksForRender = props.tasks\r\n    if (props.filterStatus === 'active') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    if (props.filterStatus === 'completed') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    const tasks = tasksForRender.map(t => <Task removeTask={props.removeTask}\r\n                                                changeItemValue={props.changeItemValue}\r\n                                                changeStatus={props.changeStatus}\r\n                                                tdlID={props.id} task={t} key={t.id} />)\r\n\r\n    const removeToDoListHandler = useCallback(() => props.removeToDoList(props.id), [props])\r\n\r\n    const onAllFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'all'), [props])\r\n    const onActiveFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'active'), [props])\r\n    const onCompletedFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'completed'), [props])\r\n\r\n    const addNewTask = useCallback((title: string) => {\r\n        props.addNewTask(props.id, title)\r\n    }, [props])\r\n\r\n    const onChangeListName = useCallback((value: string) => {\r\n        props.onChangeListName(props.id, value)\r\n    }, [props])\r\n\r\n    return (\r\n        <Paper className={`toDoListsWrapper ${props.entityStatus === 'loading' && 'entityRequest'}`}>\r\n            <h3>\r\n                <EditableSpan status={TaskStatuses.New} title={props.heading} changeItemValue={onChangeListName} />\r\n                <IconButton onClick={removeToDoListHandler}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </h3>\r\n            <AddNewItem addNewItem={addNewTask}/>\r\n            <ul className=\"listWrapper\">\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button style={{margin: '0 5px'}} color=\"secondary\" disabled={props.filterStatus === 'all'} variant={props.filterStatus === 'all' ? 'outlined' : 'contained'} onClick={ onAllFilterTasksHandler }>All</Button>\r\n                <Button style={{margin: '0 5px'}} color=\"primary\" disabled={props.filterStatus === 'active'} variant={props.filterStatus === 'active' ? 'outlined' : 'contained'} onClick={ onActiveFilterTasksHandler }>Active</Button>\r\n                <Button style={{margin: '0 5px'}} color=\"primary\" disabled={props.filterStatus === 'completed'} variant={props.filterStatus === 'completed' ? 'outlined' : 'contained'} onClick={ onCompletedFilterTasksHandler }>Completed</Button>\r\n            </div>\r\n        </Paper>\r\n    )\r\n});\r\n\r\n","import {toDoListsAPI, ToDoListType} from \"../../api/todolists-api\";\r\nimport {ThunkType} from \"../../app/store\";\r\nimport {RequestStatusType, setError, setRequestStatus} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type ToDoListDomainType = {\r\n    entityStatus: RequestStatusType\r\n    status: FilterType\r\n}\r\nexport type ToDoListWithDomainType = ToDoListType & ToDoListDomainType\r\nconst initialState: Array<ToDoListWithDomainType> = []\r\n\r\nexport const toDoListReducer = (state: Array<ToDoListWithDomainType> = initialState,\r\n                                action: ToDoListActionsType): Array<ToDoListWithDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-ENTITY-STATUS\":\r\n            return state.map(tdl => tdl.id === action.tdlID ? {...tdl, entityStatus: action.status} : tdl)\r\n        case \"SET-TO-DO-LISTS\":\r\n            return action.tdls.map(tdl => ({...tdl, status: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tdl => tdl.id !== action.tdlID)\r\n        case 'ADD-TODOLIST':\r\n            return [ {...action.payload, status: 'all', entityStatus: 'idle'}, ...state ]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tdl => tdl.id === action.id ? {...tdl, title: action.title} : tdl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tdl => tdl.id === action.id ? {...tdl, status: action.status} : tdl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setEntityStatus = (tdlID: string, status: RequestStatusType) => (\r\n    { type: \"SET-ENTITY-STATUS\", status, tdlID } as const)\r\nexport const setTDLsAC = (tdls: Array<ToDoListType>) => ({type: \"SET-TO-DO-LISTS\", tdls} as const)\r\nexport const removeToDoListAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\r\nexport const addToDoListAC = (payload: ToDoListType) => ({type: 'ADD-TODOLIST', payload,} as const)\r\nexport const changeToDoListFilterAC = (id: string, status: FilterType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, status} as const\r\n}\r\nexport const changeToDoListTitleAC = (id: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title} as const\r\n}\r\n\r\n//types\r\nexport type ToDoListActionsType = SetTDLsACType | RemoveToDoListACType\r\n    | AddToDoListACType | ChangeToDoListFilterACType | ChangeToDoListTitleACType\r\n    | SetEntityStatusType\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\nexport type SetEntityStatusType = ReturnType<typeof setEntityStatus>\r\nexport type SetTDLsACType = ReturnType<typeof setTDLsAC>\r\nexport type RemoveToDoListACType = ReturnType<typeof removeToDoListAC>\r\nexport type AddToDoListACType = ReturnType<typeof addToDoListAC>\r\nexport type ChangeToDoListFilterACType = ReturnType<typeof changeToDoListFilterAC>\r\nexport type ChangeToDoListTitleACType = ReturnType<typeof changeToDoListTitleAC>\r\n\r\n\r\n//thunks\r\nexport const setToDoListsTC = (): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await toDoListsAPI.getToDoLists()\r\n        dispatch(setTDLsAC(response.data))\r\n        dispatch(setRequestStatus('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setRequestStatus('succeeded'))\r\n    }\r\n}\r\nexport const createToDoList = (title: string): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await toDoListsAPI.createToDoList(title)\r\n        if (response.data.resultCode !== 0) {\r\n            handleServerAppError(response.data, dispatch)\r\n        } else {\r\n            dispatch(addToDoListAC(response.data.data.item))\r\n            dispatch(setRequestStatus('succeeded'))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setRequestStatus('succeeded'))\r\n    }\r\n}\r\n\r\n\r\nexport const deleteToDoList = (id: string): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    dispatch(setEntityStatus(id, 'loading'))\r\n    try {\r\n        const response = await toDoListsAPI.deleteToDoList(id)\r\n        if (response.data.resultCode !== 0) {\r\n            handleServerAppError(response.data, dispatch)\r\n        } else {\r\n            dispatch(removeToDoListAC(id))\r\n            dispatch(setRequestStatus('succeeded'))\r\n            dispatch(setEntityStatus(id, 'succeeded'))\r\n        }\r\n    } catch (error) {\r\n        dispatch(setError(error.message ?? 'Some Error occurred!'))\r\n        dispatch(setRequestStatus('failed'))\r\n        dispatch(setEntityStatus(id, 'failed'))\r\n    } finally {\r\n        dispatch(setRequestStatus('succeeded'))\r\n    }\r\n}\r\nexport const updateToDoList = (id: string, title: string): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    dispatch(setEntityStatus(id, 'loading'))\r\n    try {\r\n        const response = await toDoListsAPI.updateToDoList(id, title)\r\n        if (response.data.resultCode !== 0) {\r\n            handleServerAppError(response.data, dispatch)\r\n        } else {\r\n            dispatch(changeToDoListTitleAC(id, title))\r\n            dispatch(setEntityStatus(id, 'succeeded'))\r\n            dispatch(setRequestStatus('succeeded'))\r\n        }\r\n    } catch (error) {\r\n        dispatch(setError(error.message ?? 'Some Error occurred!'))\r\n        dispatch(setRequestStatus('failed'))\r\n        dispatch(setEntityStatus(id, 'failed'))\r\n    } finally {\r\n        dispatch(setRequestStatus('succeeded'))\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {Todolist} from \"./ToDoList/Todolist\";\r\nimport {AddNewItem} from \"../../components/AddNewItem/AddNewItem\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {\r\n    changeToDoListFilterAC,\r\n    createToDoList,\r\n    deleteToDoList,\r\n    FilterType,\r\n    setToDoListsTC,\r\n    ToDoListDomainType,\r\n    updateToDoList\r\n} from \"./todolists-reducer\";\r\nimport {changeTask, createTask, deleteTask, LocalTasksType,} from \"./tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {TaskStatuses, ToDoListType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../app/appReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"../Login/auth-reducer\";\r\n\r\nexport const ToDoListsAll = React.memo(function() {\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListType & ToDoListDomainType>>( state => state.toDoLists)\r\n    const tasks = useSelector<AppRootStateType, LocalTasksType>( state => state.tasks)\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>( state => state.app.requestStatus)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.login.isLoggedIn )\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect( () => {\r\n        if (!isLoggedIn) return\r\n        dispatch(setToDoListsTC())\r\n    }, [dispatch])\r\n\r\n    const removeToDoListHandler = useCallback((toDoLostID: string) => {\r\n        dispatch(deleteToDoList(toDoLostID))\r\n    }, [dispatch, requestStatus])\r\n\r\n    const onChangeListNameHandler = useCallback((listID: string, value: string) => {\r\n        dispatch(updateToDoList(listID, value))\r\n    }, [dispatch])\r\n\r\n    const onChangeItemValueHandler = useCallback((listID: string, itemID: string, title: string) => {\r\n        dispatch(changeTask(listID, itemID, {title}))\r\n    }, [dispatch])\r\n\r\n    const filterTasksHandler = useCallback((toDoListID: string, value: FilterType) => {\r\n        dispatch(changeToDoListFilterAC(toDoListID, value))\r\n    }, [dispatch])\r\n\r\n    const removeTaskHandler = useCallback((toDoListID: string, taskID: string) => {\r\n        dispatch(deleteTask(toDoListID, taskID))\r\n    }, [dispatch])\r\n\r\n    const addNewTaskHandler = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(createTask(toDoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatusHandler = useCallback((toDoListID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(changeTask(toDoListID, id, {status}))\r\n    }, [dispatch])\r\n\r\n    const addNewListHandler = useCallback((name: string) => {\r\n        dispatch(createToDoList(name))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return (\r\n            <>\r\n                <div className=\"addNewList\">\r\n                    <Paper style={{padding: \"15px\" }}>\r\n                        <h2 style={{margin: 0}}>Add New List</h2>\r\n                        <AddNewItem addNewItem={addNewListHandler}/>\r\n                    </Paper>\r\n                </div>\r\n                <Grid container spacing={2}>\r\n                    {toDoLists.map(tdl => {\r\n                        return (\r\n                            <Grid item  key={tdl.id}>\r\n                                <Todolist id={tdl.id}\r\n                                          entityStatus={tdl.entityStatus}\r\n                                          heading={tdl.title}\r\n                                          tasks={tasks[tdl.id]}\r\n                                          removeTask={removeTaskHandler}\r\n                                          filterTasks={filterTasksHandler}\r\n                                          addNewTask={addNewTaskHandler}\r\n                                          changeStatus={changeStatusHandler}\r\n                                          filterStatus={tdl.status}\r\n                                          removeToDoList={removeToDoListHandler}\r\n                                          changeItemValue={onChangeItemValueHandler}\r\n                                          onChangeListName={onChangeListNameHandler}\r\n                                />\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </>\r\n    );\r\n})\r\n","import {setInitialized, setRequestStatus} from \"../../app/appReducer\";\r\nimport {ThunkType} from \"../../app/store\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n        const response = await authAPI.login(data)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(response.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError({message: error.message}, dispatch)\r\n    } finally {\r\n        dispatch(setRequestStatus('succeeded'))\r\n    }\r\n}\r\nexport const initializeAppTC = (): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n    try {\r\n       const response = await authAPI.me()\r\n       if (response.data.resultCode === 0) {\r\n           dispatch(setIsLoggedInAC(true));\r\n       } else {\r\n           handleServerAppError(response.data, dispatch)\r\n       }\r\n   } catch (error) {\r\n       handleServerNetworkError({message: error.message}, dispatch)\r\n   } finally {\r\n       dispatch(setRequestStatus('succeeded'))\r\n        dispatch(setInitialized(true))\r\n   }\r\n}\r\nexport const logoutTC = (): ThunkType => async dispatch => {\r\n    dispatch(setRequestStatus('loading'))\r\n        try {\r\n            const response = await authAPI.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setRequestStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        } catch(error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }  finally {\r\n            dispatch(setRequestStatus('succeeded'))\r\n        }\r\n}\r\n\r\n\r\n\r\n// types\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: true\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'The password field is required'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'The password should contain minimum 3 characters'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email &&\r\n                        <div style={{color: 'red', fontSize: '10px'}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps('password')}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password &&\r\n                        <div style={{color: 'red', fontSize: '10px'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>} {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./appReducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {ToDoListsAll} from \"../features/ToDoListsAll/ToDoListsAll\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nconst AppWithUseReducer = React.memo(function() {\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>( state => state.app.requestStatus)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>( state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.login.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect( () => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={'headerWrapper'}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar variant=\"dense\">\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\">\r\n                            My To Do Lists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={() => dispatch(logoutTC())} style={{color: \"white\", fontWeight: 'bold', marginLeft: 'auto'}}>Log out</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div className={'headerPreloader'}>\r\n                    { requestStatus === 'loading' && <LinearProgress/>}\r\n                </div>\r\n            </div>\r\n            <Container>\r\n                <Switch>\r\n                    <Route path={'/'} exact render={ () =>  <ToDoListsAll />} />\r\n                    <Route path={'/login'} render={ () =>  <Login />} />\r\n                    <Route path={'/404'} render={ () =>  <h1><p>404:</p> Page Not Found</h1>} />\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackbar />\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithUseReducer;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ToDoListActionsType, toDoListReducer} from \"../features/ToDoListsAll/todolists-reducer\";\r\nimport {TasksActionsType, tasksReducer} from \"../features/ToDoListsAll/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./appReducer\";\r\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists: toDoListReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    login: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppRootActionType = ToDoListActionsType | TasksActionsType\r\n    | AppActionsType | AuthActionsType\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, AppRootActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n</Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}